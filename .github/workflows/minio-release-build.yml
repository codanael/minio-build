name: MinIO Release Build

on:
  schedule:
    # Run daily at 00:00 UTC to check for new releases
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      minio_version:
        description: 'MinIO version to build (e.g., RELEASE.2024-10-29T16-01-48Z). Leave empty to use latest.'
        required: false
        type: string

env:
  GO_VERSION: '1.24'

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should_build: ${{ steps.check-build.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest MinIO release
        id: get-version
        run: |
          if [ -n "${{ github.event.inputs.minio_version }}" ]; then
            VERSION="${{ github.event.inputs.minio_version }}"
            echo "Using manual version: $VERSION"
          else
            VERSION=$(curl -s https://api.github.com/repos/minio/minio/releases/latest | jq -r .tag_name)
            echo "Latest MinIO version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version already built
        id: check-build
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          # Check if release already exists in our repo
          if gh release view "$VERSION" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "Version $VERSION already built"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION needs to be built"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  build-binaries:
    needs: check-release
    if: needs.check-release.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download MinIO source archive
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          echo "Downloading MinIO $VERSION source archive"

          # Download source tarball from GitHub release
          curl -L -o minio-source.tar.gz \
            "https://github.com/minio/minio/archive/refs/tags/${VERSION}.tar.gz"

          # Extract the archive
          tar xzf minio-source.tar.gz

          # Rename extracted directory to minio-src for consistency
          mv minio-${VERSION} minio-src

          # Initialize git repository for build scripts
          cd minio-src
          git init
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add .
          git commit -m "Release ${VERSION}"
          git tag "${VERSION}"
          cd ..

          echo "Downloaded and extracted MinIO $VERSION"

      - name: Build MinIO binary
        run: |
          cd minio-src
          VERSION="${{ needs.check-release.outputs.version }}"

          # Generate build flags
          LDFLAGS=$(go run buildscripts/gen-ldflags.go)

          # Build binary
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -tags kqueue -trimpath --ldflags "$LDFLAGS" -o ../minio-${{ matrix.name }}

          cd ..

          # Create archive
          tar czf minio-${{ matrix.name }}.tar.gz minio-${{ matrix.name }}

      - name: Generate checksums
        run: |
          sha256sum minio-${{ matrix.name }}.tar.gz > minio-${{ matrix.name }}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: minio-${{ matrix.name }}
          path: |
            minio-${{ matrix.name }}.*
          retention-days: 1

  create-release:
    needs: [check-release, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"

          # Create release notes
          cat > release-notes.md << 'EOF'
          # MinIO Build $VERSION

          This release contains MinIO binaries built from the official [MinIO $VERSION](https://github.com/minio/minio/releases/tag/$VERSION) release.

          ## Available Binaries

          - **Linux AMD64**: `minio-linux-amd64.tar.gz`
          - **Linux ARM64**: `minio-linux-arm64.tar.gz`

          Each archive includes SHA256 checksums for verification.

          ## Installation

          ### Linux
          ```bash
          # Download and extract
          tar xzf minio-linux-amd64.tar.gz

          # Make executable
          chmod +x minio-linux-amd64

          # Run MinIO
          ./minio-linux-amd64 server /data
          ```

          ## Source

          This build is based on the official MinIO source code available at:
          https://github.com/minio/minio

          ## License

          MinIO is licensed under AGPLv3. See the [MinIO repository](https://github.com/minio/minio) for details.
          EOF

          # Replace variables in the notes
          sed -i "s/\$VERSION/$VERSION/g" release-notes.md

          # Collect all artifacts
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.sha256" \) -exec mv {} . \;

          # Create release
          gh release create "$VERSION" \
            --title "MinIO Build $VERSION" \
            --notes-file release-notes.md \
            *.tar.gz *.sha256
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update latest tag
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          git tag -f latest
          git push -f origin latest || true
